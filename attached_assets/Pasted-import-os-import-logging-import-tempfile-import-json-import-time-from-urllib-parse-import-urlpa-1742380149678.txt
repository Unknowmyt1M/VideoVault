import os
import logging
import tempfile
import json
import time
from urllib.parse import urlparse

def format_duration(seconds):
    """Format duration from seconds to HH:MM:SS"""
    if not seconds:
        return "00:00"
    
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    
    if hours > 0:
        return f"{hours:02d}:{minutes:02d}:{secs:02d}"
    return f"{minutes:02d}:{secs:02d}"
from flask import Flask, render_template, request, jsonify, flash, session, redirect, send_file
import yt_dlp
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import Flow
import requests
from config import Config
from models import db, Video
from urllib.parse import urlparse, parse_qs

def is_valid_youtube_url(url):
    try:
        parsed_url = urlparse(url)
        if parsed_url.netloc in ['youtube.com', 'www.youtube.com', 'youtu.be']:
            if parsed_url.netloc == 'youtu.be':
                return bool(parsed_url.path[1:])
            if parsed_url.path == '/watch':
                return bool(parse_qs(parsed_url.query).get('v'))
            return False
        return False
    except:
        return False

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET")
app.config.from_object(Config)

# Configure database
app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get("DATABASE_URL")
app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
    "pool_recycle": 300,
    "pool_pre_ping": True,
}
# Initialize the database
db.init_app(app)

# Create tables
with app.app_context():
    db.create_all()

# Temporary directory for storing downloads
temp_dir = tempfile.gettempdir()

# Google Drive API scopes
SCOPES = ['https://www.googleapis.com/auth/drive.file']

# Import and register Google Auth blueprint
from google_auth import google_auth
app.register_blueprint(google_auth)

def get_authenticated_service():
    """Build and return a Drive service object"""
    try:
        if 'credentials' not in session:
            logger.debug("No credentials in session")
            return None
        
        # Parse credentials from session
        creds_data = json.loads(session['credentials'])
        logger.debug(f"Credentials structure: {list(creds_data.keys())}")
        
        # Ensure all required fields are present
        required_fields = ['token', 'refresh_token', 'token_uri', 'client_id', 'client_secret', 'scopes']
        missing_fields = [field for field in required_fields if field not in creds_data]
        
        if missing_fields:
            logger.error(f"Credentials missing required fields: {missing_fields}")
            flash(f"Authentication issue: Missing {', '.join(missing_fields)}")
            return None
        
        # Create credentials object
        credentials = Credentials(
            token=creds_data['token'],
            refresh_token=creds_data['refresh_token'],
            token_uri=creds_data['token_uri'],
            client_id=creds_data['client_id'],
            client_secret=creds_data['client_secret'],
            scopes=creds_data['scopes']
        )
        
        # Refresh if expired
        if credentials and credentials.expired and credentials.refresh_token:
            credentials.refresh(Request())
            
            # Update session with refreshed credentials
            updated_creds = {
                'token': credentials.token,
                'refresh_token': credentials.refresh_token,
                'token_uri': credentials.token_uri,
                'client_id': credentials.client_id,
                'client_secret': credentials.client_secret,
                'scopes': credentials.scopes
            }
            session['credentials'] = json.dumps(updated_creds)
        
        return build('drive', 'v3', credentials=credentials)
    except Exception as e:
        logger.error(f"Error getting authenticated service: {e}")
        return None

@app.route('/')
def index():
    """Render the main page with options"""
    return render_template('index.html')

@app.route('/download')
def download_page():
    """Render the download page"""
    return render_template('download.html')

@app.route('/metadata')
def metadata_page():
    """Render the metadata extraction page"""
    return render_template('metadata.html')

@app.route('/get_metadata', methods=['POST'])
def get_metadata():
    """Extract metadata from YouTube URL"""
    try:
        data = request.get_json()
        url = data.get('url', '')
        
        if not is_valid_youtube_url(url):
            return jsonify({'error': 'Invalid YouTube URL'}), 400
        
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': True
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            
        return jsonify({
            'title': info.get('title', 'Unknown title'),
            'description': info.get('description', 'No description available'),
            'channel': info.get('uploader', 'Unknown channel'),
            'duration': format_duration(info.get('duration', 0)),
            'tags': info.get('tags', [])
        })
    except Exception as e:
        logger.error(f"Error extracting metadata: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/history_page')
def history_page():
    """Render the history page"""
    return render_template('history.html')

@app.route('/auth')
def auth():
    """Start the OAuth flow - redirects to the Google Auth blueprint"""
    return redirect('/google_login')

@app.route('/get_video_info', methods=['POST'])
def get_video_info():
    """Get video information from YouTube URL"""
    try:
        data = request.get_json()
        url = data.get('url', '')
        
        # Validate YouTube URL
        parsed_url = urlparse(url)
        if 'youtube.com' not in parsed_url.netloc and 'youtu.be' not in parsed_url.netloc:
            return jsonify({'error': 'Invalid YouTube URL'}), 400
        
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'skip_download': True,
            'format': 'best',
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            
        return jsonify({
            'title': info.get('title', 'Unknown title'),
            'duration': info.get('duration', 0),
            'thumbnail': info.get('thumbnail', ''),
            'uploader': info.get('uploader', 'Unknown uploader'),
        })
    except Exception as e:
        logger.error(f"Error getting video info: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/download', methods=['POST'])
def download_video():
    """Download video from YouTube URL"""
    try:
        data = request.get_json()
        logger.info(f"Download data received: {data}")
        
        url = data.get('url', '')
        format_id = data.get('format', 'best')
        
        # Create a unique filename
        timestamp = int(time.time())
        temp_file = os.path.join(temp_dir, f"yt_video_{timestamp}")
        logger.info(f"Temp file path: {temp_file}")
        
        ydl_opts = {
            'format': format_id,
            'outtmpl': temp_file + '.%(ext)s',
            'progress_hooks': [],
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            
        # Get the actual filename with extension
        filename = ydl.prepare_filename(info)
        logger.info(f"Downloaded to filename: {filename}")
        
        if os.path.exists(filename):
            # Get file size
            file_size = os.path.getsize(filename)
            logger.info(f"File size: {file_size} bytes")
            
            # Create database record
            video = Video(
                youtube_id=info.get('id', ''),
                title=info.get('title', 'Unknown'),
                url=url,
                duration=info.get('duration', 0),
                thumbnail_url=info.get('thumbnail', ''),
                uploader=info.get('uploader', 'Unknown uploader'),
                file_size=file_size,
                download_success=True,
                uploaded_to_youtube=False,  # New fields
                youtube_upload_id=None
            )
            
            db.session.add(video)
            db.session.commit()
            logger.info(f"Video record created with ID: {video.id}")
            
            # Add video ID to response for later reference
            response_data = {
                'status': 'success',
                'message': 'Video downloaded successfully',
                'filename': filename,
                'title': info.get('title', 'Unknown'),
                'video_id': video.id
            }
            logger.info(f"Sending response with data: {response_data}")
            return jsonify(response_data)
        else:
            return jsonify({'error': 'Download failed - file not found'}), 500
    except Exception as e:
        logger.error(f"Download error: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/upload_to_drive', methods=['POST'])
def upload_to_drive():
    """Upload video to Google Drive"""
    try:
        data = request.get_json()
        filename = data.get('filename', '')
        folder_id = data.get('folder_id', None)
        video_id = data.get('video_id', None)
        
        if not os.path.exists(filename):
            return jsonify({'error': 'File not found'}), 404
        
        drive_service = get_authenticated_service()
        if not drive_service:
            return jsonify({'error': 'Not authenticated with Google Drive'}), 401
        
        # Create file metadata
        file_metadata = {
            'name': os.path.basename(filename),
        }
        
        if folder_id:
            file_metadata['parents'] = [folder_id]
        
        # Upload file
        media = MediaFileUpload(
            filename, 
            resumable=True
        )
        
        file = drive_service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id'
        ).execute()
        
        # Update database record if video_id was provided
        if video_id:
            video = Video.query.get(video_id)
            if video:
                video.uploaded_to_drive = True
                video.drive_file_id = file.get('id')
                video.drive_folder_id = folder_id
                db.session.commit()
        
        # Don't delete the file if it might be needed for YouTube upload
        # We'll let the user explicitly request deletion when both uploads are complete
        
        return jsonify({
            'status': 'success',
            'message': 'Video uploaded to Google Drive',
            'file_id': file.get('id')
        })
    except Exception as e:
        logger.error(f"Upload error: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/get_drive_folders', methods=['GET'])
def get_drive_folders():
    """Get list of Google Drive folders"""
    try:
        drive_service = get_authenticated_service()
        if not drive_service:
            return jsonify({'error': 'Not authenticated with Google Drive'}), 401
        
        # Query all folders including those in shared drives and shared with the user
        results = drive_service.files().list(
            q="mimeType='application/vnd.google-apps.folder'",
            spaces='drive',
            fields='files(id, name, parents)',
            pageSize=1000,  # Get maximum number of folders
            includeItemsFromAllDrives=True,
            supportsAllDrives=True
        ).execute()
        
        folders = results.get('files', [])
        logger.info(f"Found {len(folders)} folders")
        
        # Sort folders by name for better display
        folders.sort(key=lambda x: x.get('name', '').lower())
        
        return jsonify({'folders': folders})
    except Exception as e:
        logger.error(f"Error getting folders: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/upload_to_youtube', methods=['POST'])
def upload_to_youtube():
    """Upload video to YouTube"""
    try:
        data = request.get_json()
        logger.info(f"YouTube upload data received: {data}")
        
        filename = data.get('filename', '')
        video_id = data.get('video_id', None)
        title = data.get('title', os.path.basename(filename))
        description = data.get('description', 'Uploaded via YouTube Downloader App')
        tags = data.get('tags', '').split(',') if data.get('tags') else []
        category_id = data.get('category_id', '22')  # Default: "People & Blogs"
        privacy_status = data.get('privacy_status', 'private')  # Default: private
        
        logger.info(f"Checking file: {filename}, exists: {os.path.exists(filename) if filename else 'No filename provided'}")
        
        if not filename:
            return jsonify({'error': 'No video file available for upload'}), 400
            
        if not os.path.exists(filename):
            return jsonify({'error': 'File not found'}), 404
            
        # Get authenticated service
        credentials_data = json.loads(session.get('credentials', '{}'))
        if not credentials_data:
            return jsonify({'error': 'Not authenticated with Google'}), 401
            
        credentials = Credentials(
            token=credentials_data.get('token'),
            refresh_token=credentials_data.get('refresh_token'),
            token_uri=credentials_data.get('token_uri'),
            client_id=credentials_data.get('client_id'),
            client_secret=credentials_data.get('client_secret'),
            scopes=credentials_data.get('scopes')
        )
        
        if credentials.expired:
            request_obj = Request()
            credentials.refresh(request_obj)
            # Update stored credentials
            credentials_data['token'] = credentials.token
            session['credentials'] = json.dumps(credentials_data)
            
        youtube_service = build('youtube', 'v3', credentials=credentials)
        
        # Create video metadata
        body = {
            'snippet': {
                'title': title,
                'description': description,
                'tags': tags,
                'categoryId': category_id
            },
            'status': {
                'privacyStatus': privacy_status
            }
        }
        
        # Create media upload with progress reporting
        media = MediaFileUpload(
            filename, 
            mimetype='video/mp4',
            resumable=True,
            chunksize=1024*1024
        )
        
        # Upload video
        request_obj = youtube_service.videos().insert(
            part=','.join(body.keys()),
            body=body,
            media_body=media
        )
        
        response = None
        last_progress = 0
        
        while response is None:
            status, response = request_obj.next_chunk()
            if status:
                progress = int(status.progress() * 100)
                # Only log if progress has changed significantly
                if progress - last_progress >= 5:
                    logger.info(f"YouTube upload progress: {progress}%")
                    last_progress = progress
        
        youtube_video_id = response.get('id')
        logger.info(f"Video uploaded successfully to YouTube. ID: {youtube_video_id}")
        
        # Update database record
        if video_id:
            video = Video.query.get(video_id)
            if video:
                video.uploaded_to_youtube = True
                video.youtube_upload_id = youtube_video_id
                db.session.commit()
        
        # Now that YouTube upload is complete, we can safely clean up if Drive upload also happened
        if video_id:
            video = Video.query.get(video_id)
            if video and video.uploaded_to_drive and os.path.exists(filename):
                logger.info(f"Cleaning up file after successful uploads: {filename}")
                try:
                    os.remove(filename)
                except Exception as e:
                    logger.error(f"Error removing temporary file: {e}")
                
        return jsonify({
            'status': 'success',
            'message': 'Video uploaded successfully to YouTube',
            'youtube_video_id': youtube_video_id,
            'watch_url': f'https://www.youtube.com/watch?v={youtube_video_id}'
        })
    except Exception as e:
        error_message = str(e)
        logger.error(f"YouTube upload error: {error_message}")
        
        # Check for permission error
        if "insufficientPermissions" in error_message or "insufficient authentication scopes" in error_message:
            return jsonify({
                'error': 'YouTube API permissions are missing. Please log out and log back in to grant all required permissions.',
                'action_required': 'reauth',
                'details': error_message
            }), 403
            
        return jsonify({'error': error_message}), 500

@app.route('/download_file/<path:filename>')
def download_file(filename):
    """Download a file to user's device"""
    try:
        # Ensure the file exists and is within the temp directory
        if not os.path.exists(filename) or not filename.startswith(temp_dir):
            return jsonify({'error': 'File not found'}), 404
            
        return send_file(
            filename,
            as_attachment=True,
            download_name=os.path.basename(filename)
        )
    except Exception as e:
        logger.error(f"Error downloading file: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/history', methods=['GET'])
def get_history():
    """Get download/upload history"""
    try:
        # Get all videos from database, ordered by download date (newest first)
        videos = Video.query.order_by(Video.download_date.desc()).all()
        
        # Convert to list of dictionaries
        video_list = [video.to_dict() for video in videos]
        
        return jsonify({
            'status': 'success',
            'videos': video_list
        })
    except Exception as e:
        logger.error(f"Error getting history: {e}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000, debug=True)
